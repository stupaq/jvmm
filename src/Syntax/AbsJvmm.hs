module Syntax.AbsJvmm where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Declaration =
   DVariable Type Ident
  deriving (Eq,Ord,Show)

data Program =
   Program [Definition]
  deriving (Eq,Ord,Show)

data Definition =
   DFunction Function
 | DClass Class
  deriving (Eq,Ord,Show)

data Function =
   Function Type Ident [Argument] Exceptions [Stmt]
  deriving (Eq,Ord,Show)

data Exceptions =
   NoExceptions
 | Exceptions [Type]
  deriving (Eq,Ord,Show)

data Argument =
   Argument Type Ident
  deriving (Eq,Ord,Show)

data Class =
   Class Ident Extends [Member]
  deriving (Eq,Ord,Show)

data Member =
   Field Declaration
 | Method Function
  deriving (Eq,Ord,Show)

data Extends =
   SuperClass Type
 | SuperObject
  deriving (Eq,Ord,Show)

data Type =
   TVoid
 | TInt
 | TChar
 | TBool
 | TString
 | TObject
 | TUser Ident
 | TArray Type
  deriving (Eq,Ord,Show)

data Stmt =
   SBlock [Stmt]
 | SAssignOp Ident OpAssign Expr
 | SAssignOpArr Ident Expr OpAssign Expr
 | SAssignOpFld Ident Ident OpAssign Expr
 | SAssignOpThis Ident OpAssign Expr
 | SPostInc Ident
 | SPostDec Ident
 | SEmpty
 | SAssign Ident Expr
 | SAssignArr Ident Expr Expr
 | SAssignFld Ident Ident Expr
 | SAssignThis Ident Expr
 | SReturn Expr
 | SReturnV
 | SIf Expr Stmt
 | SIfElse Expr Stmt Stmt
 | SWhile Expr Stmt
 | SForeach Type Ident Expr Stmt
 | SExpr Expr
 | SThrow Expr
 | STryCatch Stmt Type Ident Stmt
 | SDeclVar Type [Item]
  deriving (Eq,Ord,Show)

data Item =
   NoInit Ident
 | Init Ident Expr
  deriving (Eq,Ord,Show)

data Expr =
   EAccessArr Expr Expr
 | EAccessFn Expr Ident [Expr]
 | EAccessVar Expr Ident
 | EVar Ident
 | ELitInt Integer
 | ELitString String
 | ELitChar Char
 | EThis
 | ELitTrue
 | ELitFalse
 | ENull
 | ENullT Type
 | EAccessArrI Ident Expr
 | EAccessFnI Ident Ident [Expr]
 | EAccessVarI Ident Ident
 | EApp Ident [Expr]
 | ENewObj Type
 | ENewArr Type Expr
 | ENeg Expr
 | ENot Expr
 | EMul Expr OpBin Expr
 | EAdd Expr OpBin Expr
 | ERel Expr OpBin Expr
 | EAnd Expr OpBin Expr
 | EOr Expr OpBin Expr
  deriving (Eq,Ord,Show)

data OpAssign =
   ATimes
 | ADiv
 | AMod
 | APlus
 | AMinus
  deriving (Eq,Ord,Show)

data OpBin =
   Times
 | Div
 | Mod
 | Plus
 | Minus
 | LTH
 | LEQ
 | GTH
 | GEQ
 | EQU
 | NEQ
 | And
 | Or
  deriving (Eq,Ord,Show)

