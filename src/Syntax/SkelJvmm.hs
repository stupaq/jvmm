module Syntax.SkelJvmm where

-- Haskell module generated by the BNF converter

import Syntax.AbsJvmm
import Syntax.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  DVariable type' id  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Program definitions  -> failure x


transDefinition :: Definition -> Result
transDefinition x = case x of
  DFunction function  -> failure x
  DClass class'  -> failure x


transFunction :: Function -> Result
transFunction x = case x of
  Function type' id arguments exceptions stmts  -> failure x


transExceptions :: Exceptions -> Result
transExceptions x = case x of
  NoExceptions  -> failure x
  Exceptions types  -> failure x


transArgument :: Argument -> Result
transArgument x = case x of
  Argument type' id  -> failure x


transClass :: Class -> Result
transClass x = case x of
  Class id extends members  -> failure x


transMember :: Member -> Result
transMember x = case x of
  Field declaration  -> failure x
  Method function  -> failure x


transExtends :: Extends -> Result
transExtends x = case x of
  SuperClass type'  -> failure x
  SuperObject  -> failure x


transType :: Type -> Result
transType x = case x of
  TVoid  -> failure x
  TInt  -> failure x
  TChar  -> failure x
  TBool  -> failure x
  TString  -> failure x
  TObject  -> failure x
  TUser id  -> failure x
  TArray type'  -> failure x


transStmt :: Stmt -> Result
transStmt x = case x of
  SBlock stmts  -> failure x
  SAssignOp id opassign expr  -> failure x
  SAssignOpArr id expr1 opassign2 expr3  -> failure x
  SAssignOpFld id1 id2 opassign3 expr4  -> failure x
  SAssignOpThis id opassign expr  -> failure x
  SPostInc id  -> failure x
  SPostDec id  -> failure x
  SEmpty  -> failure x
  SAssign id expr  -> failure x
  SAssignArr id expr1 expr2  -> failure x
  SAssignFld id1 id2 expr3  -> failure x
  SAssignThis id expr  -> failure x
  SReturn expr  -> failure x
  SReturnV  -> failure x
  SIf expr stmt  -> failure x
  SIfElse expr stmt1 stmt2  -> failure x
  SWhile expr stmt  -> failure x
  SForeach type' id expr stmt  -> failure x
  SExpr expr  -> failure x
  SThrow expr  -> failure x
  STryCatch stmt1 type'2 id3 stmt4  -> failure x
  SDeclVar type' items  -> failure x


transItem :: Item -> Result
transItem x = case x of
  NoInit id  -> failure x
  Init id expr  -> failure x


transExpr :: Expr -> Result
transExpr x = case x of
  EAccessArr expr1 expr2  -> failure x
  EAccessFn expr id exprs  -> failure x
  EAccessVar expr id  -> failure x
  EVar id  -> failure x
  ELitInt n  -> failure x
  ELitString str  -> failure x
  ELitChar c  -> failure x
  EThis  -> failure x
  ELitTrue  -> failure x
  ELitFalse  -> failure x
  ENull  -> failure x
  ENullT type'  -> failure x
  EAccessArrI id expr  -> failure x
  EAccessFnI id1 id2 exprs3  -> failure x
  EAccessVarI id1 id2  -> failure x
  EApp id exprs  -> failure x
  ENewObj type'  -> failure x
  ENewArr type' expr  -> failure x
  ENeg expr  -> failure x
  ENot expr  -> failure x
  EMul expr1 opbin2 expr3  -> failure x
  EAdd expr1 opbin2 expr3  -> failure x
  ERel expr1 opbin2 expr3  -> failure x
  EAnd expr1 opbin2 expr3  -> failure x
  EOr expr1 opbin2 expr3  -> failure x


transOpAssign :: OpAssign -> Result
transOpAssign x = case x of
  ATimes  -> failure x
  ADiv  -> failure x
  AMod  -> failure x
  APlus  -> failure x
  AMinus  -> failure x


transOpBin :: OpBin -> Result
transOpBin x = case x of
  Times  -> failure x
  Div  -> failure x
  Mod  -> failure x
  Plus  -> failure x
  Minus  -> failure x
  LTH  -> failure x
  LEQ  -> failure x
  GTH  -> failure x
  GEQ  -> failure x
  EQU  -> failure x
  NEQ  -> failure x
  And  -> failure x
  Or  -> failure x



