-- JVMM : BNF syntax specification --
-------------------------------------

entrypoints Program;

-- PROGRAM --
--------------

Program.      Program ::= [Definition];

DFunction.    Definition ::= Function;

DClass.       Definition ::= Class;

separator nonempty Definition "";

-- FUNCTION --
--------------

Function.     Function ::= Type Ident "(" [Argument] ")" Exceptions LeftBrace [Stmt] RightBrace;

Argument.     Argument ::= Type Ident;

separator Argument ",";

NoExceptions. Exceptions ::= ;

Exceptions.   Exceptions ::= "throws" [Type];

-- CLASS --
-----------

Class.        Class ::= "class" Ident Extends LeftBrace [Member] RightBrace;

FieldsList.   Member ::= Type [Field] Semicolon;

Field.        Field ::= Ident;

separator nonempty Field ",";

Method.       Member ::= Function;

terminator nonempty Member "";

SuperClass.   Extends ::= "extends" Type;

SuperObject.  Extends ::= ;

-- TYPES --
-----------

-- EXTENSIONS/
TObject.    Type ::= "Object";

TUser.      Type ::= Ident;

TArray.     Type ::= Type "[]";

TChar.      Type ::= "char";
-- /EXTENSIONS

TInt.       Type ::= "int";

TString.    Type ::= "string";

TBool.      Type ::= "boolean";

TVoid.      Type ::= "void";

separator nonempty Type ",";

-- STATEMENTS --
----------------

-- EXTENSIONS/
SThrow.         Stmt ::= "throw" Expr Semicolon;

STryCatch.      Stmt ::= "try" Stmt "catch" "(" Type Ident ")" Stmt;
-- /EXTENSIONS

SBlock.         Stmt ::= LeftBrace [Stmt] RightBrace;

SEmpty.         Stmt ::= Semicolon;

SDeclVar.       Stmt ::= Type [Item] Semicolon;

separator Stmt "";

NoInit.         Item ::= Ident;

Init.           Item ::= Ident "=" Expr;

separator nonempty Item ",";

SAssign.        Stmt ::= Ident "=" Expr  Semicolon;

-- EXTENSIONS/
SAssignArr.     Stmt ::= Ident "[" Expr "]" "=" Expr  Semicolon;

SAssignFld.     Stmt ::= Ident "." Ident "=" Expr  Semicolon;

SAssignThis.    Stmt ::= "self" "." Ident "=" Expr  Semicolon;
-- /EXTENSIONS

SPostInc.       Stmt ::= Ident "++" Semicolon;

SPostDec.       Stmt ::= Ident "--" Semicolon;

SAssignOp.      Stmt ::= Ident AssignOp Expr  Semicolon;

-- EXTENSIONS/
SAssignOpArr.   Stmt ::= Ident "[" Expr "]" AssignOp Expr  Semicolon;

SAssignOpFld.   Stmt ::= Ident "." Ident AssignOp Expr  Semicolon;

SAssignOpThis.  Stmt ::= "self" "." Ident AssignOp Expr  Semicolon;
-- /EXTENSIONS

SReturn.        Stmt ::= "return" Expr Semicolon;

SReturnV.       Stmt ::= "return" Semicolon;

-- The following two rules are responsible for the only shift/reduce conflict,
-- tested in conflict001 testcase.
SIf.            Stmt ::= "if" "(" Expr ")" Stmt;

SIfElse.        Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;

SWhile.         Stmt ::= "while" "(" Expr ")" Stmt;

SForeach.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt;

SExpr.          Stmt ::= Expr Semicolon;

-- EXPRESSIONS --
-----------------

-- EXTENTIONS/
EArrayE.    Expr6 ::= Expr7 "[" Expr "]";

EMethodE.   Expr6 ::= Expr7 "." Ident "(" [Expr] ")";

EFieldE.    Expr6 ::= Expr7 "." Ident;

EArrayI.    Expr6 ::= Ident "[" Expr "]";

EMethodI.   Expr6 ::= Ident "." Ident "(" [Expr] ")";

EFieldI.    Expr6 ::= Ident "." Ident;

ENewObject. Expr6 ::= "new" Type;

ENewArray.  Expr6 ::= "new" Type "[" Expr "]";

EMethodIT.  Expr6 ::= "self" "." Ident "(" [Expr] ")";

EFieldIT.   Expr6 ::= "self" "." Ident;

EThis.      Expr6 ::= "self";

ENullT.     Expr6 ::= "(" Type ")null";

ENull.      Expr6 ::= "null";

ELitChar.   Expr6 ::= Char;
-- /EXTENSIONS

EVar.       Expr6 ::= Ident;

ELitInt.    Expr6 ::= Integer;

ELitTrue.   Expr6 ::= "true";

ELitFalse.  Expr6 ::= "false";

EApp.       Expr6 ::= Ident "(" [Expr] ")";

EString.    Expr6 ::= String;

-- Original grammary says that `Expr5 ::= "-" Expr6`, this rule prohibits many not-so-useful
-- expressions like `- -1`. Being a total fan of weird stuff, I have changed that.
ENeg.       Expr5 ::= "-" Expr5;

-- See comment on previous rule.
ENot.       Expr5 ::= "!" Expr5;

EMul.       Expr4 ::= Expr4 MulOp Expr5;

EAdd.       Expr3 ::= Expr3 AddOp Expr4;

ERel.       Expr2 ::= Expr2 RelOp Expr3;

EAnd.       Expr1 ::= Expr1 "&&" Expr2;

EOr.        Expr ::= Expr "||" Expr1;

coercions Expr 7;

separator Expr ",";

-- OPERATORS --
---------------

APlus.      AssignOp ::= "+=";

AMinus.     AssignOp ::= "-=";

ATimes.     AssignOp ::= "*=";

ADiv.       AssignOp ::= "/=";

AMod.       AssignOp ::= "%=";

Plus.       AddOp ::= "+";

Minus.      AddOp ::= "-";

Times.      MulOp ::= "*";

Div.        MulOp ::= "/";

Mod.        MulOp ::= "%";

LTH.        RelOp ::= "<";

LEQ.        RelOp ::= "<=";

GTH.        RelOp ::= ">";

GEQ.        RelOp ::= ">=";

EQU.        RelOp ::= "==";

NEQ.        RelOp ::= "!=";

-- TOKENS --
------------

position token Semicolon ';';

position token LeftBrace '{';

position token RightBrace '}';

-- COMMENTS --
--------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

