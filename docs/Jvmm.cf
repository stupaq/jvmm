-- Jvmm : BNF syntax specification --
-------------------------------------

-- There are 2 shift/reduce conflicts
-- SIf. | SIfElse. -- tested in examples_good/conflict001.jv
-- SAssignArr. | EAccessArr. -- tested in examples_good/conflict002.jv
-- Labels prefixed with "Pn_" are prunned in subsequent phases

-- programs --
--------------

entrypoints P_Prog;

P_Prog.      P_Prog ::= [P_DefFunc];
separator nonempty P_DefFunc "";

-- blocks --
------------

internal    Local. Stmt ::=  "{" [Stmt] ";" [Stmt] "}";

internal    Global. Stmt ::= "{" [Stmt] "}";

P_Block.    P_Block ::= "{" [Stmt] "}";
separator Stmt "";

-- declarations/definitions --
------------------------------

internal    SDefFunc. Stmt ::= Type Ident "(" [Arg] ")" "throws" [Type] Stmt;

internal    SDeclVar. Stmt ::= Type Ident ";";

Arg.        Arg ::= Type Ident;
separator Arg ",";

P_DefFunc.   P_DefFunc ::= Type Ident "(" [Arg] ")" P_FunExcepts P_Block;

P_Excepts.   P_FunExcepts ::= "throws" [Type];
separator nonempty Type ",";

P_NoExcept.  P_FunExcepts ::= ;

P_SDeclVar.  Stmt ::= Type [P_Item] ";";
separator nonempty P_Item ",";

P_NoInit.   P_Item ::= Ident;

P_Init.     P_Item ::= Ident "=" Expr;

-- statements --
----------------

P_SBlock.   Stmt ::= P_Block;

P_SAssignOp. Stmt ::= Ident OpAssign Expr  ";";

P_SPostInc. Stmt ::= Ident "++" ";";

P_SPostDec. Stmt ::= Ident "--" ";";

SEmpty.     Stmt ::= ";";

SAssign.    Stmt ::= Ident "=" Expr  ";";

SAssignArr. Stmt ::= Ident "[" Expr "]" "=" Expr  ";";

SReturn.    Stmt ::= "return" Expr ";";

SReturnV.   Stmt ::= "return" ";";

SIf.        Stmt ::= "if" "(" Expr ")" Stmt;

SIfElse.    Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;

SWhile.     Stmt ::= "while" "(" Expr ")" Stmt;

SForeach.   Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt;

SExpr.      Stmt ::= Expr ";";

SThrow.     Stmt ::= "throw" Expr ";";

STryCatch.  Stmt ::= "try" Stmt "catch" "(" Type Ident ")" Stmt;

-- types --
-----------

internal    TFunc. Type ::= Type "(" [Type] ")" "throws" [Type];

TArray.     Type1 ::= Type "[]";

TInt.       Type ::= "int";

TString.    Type ::= "String";

TChar.      Type ::= "char";

TBool.      Type ::= "boolean";

TVoid.      Type ::= "void";

TUser.      Type ::= Ident;

TObject.    Type ::= "Object";

coercions Type 1;

-- expressions --
-----------------

internal    EBinaryT. Expr4 ::= Type "=|" Expr4 OpMul Expr5;

internal    EUnaryT. Expr3 ::= Type "=|" Expr3 OpAdd Expr4;

EVar.       Expr8 ::= Ident;

ELitInt.    Expr8 ::= Integer;

ELitTrue.   Expr8 ::= "true";

ELitFalse.  Expr8 ::= "false";

ELitString. Expr8 ::= String;

ELitChar.   Expr8 ::= Char;

ENull.      Expr8 ::= "null";

EAccessArr. Expr7 ::= Expr8 "[" Expr "]";

EAccessFn.  Expr7 ::= Expr8 "." Ident "(" [Expr] ")";

EAccessVar. Expr7 ::= Expr8 "." Ident;

EApp.       Expr7 ::= Ident "(" [Expr] ")";

ENewArr.    Expr6 ::= "new" Type "[" Expr "]";

ENeg.       Expr5 ::= "-" Expr6;

ENot.       Expr5 ::= "!" Expr6;

EMul.       Expr4 ::= Expr4 OpMul Expr5 ;

EAdd.       Expr3 ::= Expr3 OpAdd Expr4 ;

ERel.       Expr2 ::= Expr2 OpRel Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;

coercions Expr 8;

separator Expr ",";

-- operators --
---------------

APlus.      OpAssign ::= "+=";

AMinus.     OpAssign ::= "-=";

ATimes.     OpAssign ::= "*=";

ADiv.       OpAssign ::= "/=";

AMod.       OpAssign ::= "%=";

Plus.       OpAdd ::= "+";

Minus.      OpAdd ::= "-";

Times.      OpMul ::= "*";

Div.        OpMul ::= "/";

Mod.        OpMul ::= "%";

LTH.        OpRel ::= "<";

LEQ.        OpRel ::= "<=";

GTH.        OpRel ::= ">";

GEQ.        OpRel ::= ">=";

EQU.        OpRel ::= "==";

NEQ.        OpRel ::= "!=";

-- tokens --
------------

-- comments --
--------------

comment  "//";

comment  "/*" "*/";

