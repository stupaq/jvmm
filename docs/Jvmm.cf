-- JVMM : BNF syntax specification --
-------------------------------------

entrypoints Program;

-- PROGRAM --
--------------

Program.      Program ::= [Definition];

DFunction.    Definition ::= Function;

DClass.       Definition ::= Class;

separator nonempty Definition "";

-- FUNCTION --
--------------

Function.     Function ::= TypeBasic Ident "(" [Argument] ")" Exceptions LeftBrace [Stmt] RightBrace;

Argument.     Argument ::= TypeBasic Ident;

separator Argument ",";

NoExceptions. Exceptions ::= ;

-- EXTENSIONS/
Exceptions.   Exceptions ::= "throws" [TypeComposed];
-- /EXTENSIONS

-- CLASS --
-----------

Class.        Class ::= "class" Ident Extends LeftBrace [Member] RightBrace;

FieldsList.   Member ::= TypeBasic [Field] Semicolon;

Field.        Field ::= Ident;

separator nonempty Field ",";

Method.       Member ::= Function;

terminator nonempty Member "";

SuperClass.   Extends ::= "extends" TypeComposed;

SuperObject.  Extends ::= ;

-- TYPES --
-----------

TComposed.  TypeBasic ::= TypeComposed;

TPrimitive. TypeBasic ::= TypePrimitive;

-- EXTENSIONS/
TObject.    TypeComposed ::= "Object";

TUser.      TypeComposed ::= Ident;

TArray.     TypeComposed ::= TypeBasic "[]";

TString.    TypeComposed ::= "string";

separator nonempty TypeComposed ",";
-- /EXTENSIONS

TInt.       TypePrimitive ::= "int";

TChar.      TypePrimitive ::= "char";

TBool.      TypePrimitive ::= "boolean";

TVoid.      TypePrimitive ::= "void";

-- STATEMENTS --
----------------

-- EXTENSIONS/
SThrow.         Stmt ::= "throw" Expr Semicolon;

STryCatch.      Stmt ::= "try" Stmt "catch" "(" TypeComposed Ident ")" Stmt;
-- /EXTENSIONS

SBlock.         Stmt ::= LeftBrace [Stmt] RightBrace;

SEmpty.         Stmt ::= Semicolon;

SDeclVar.       Stmt ::= TypeBasic [Item] Semicolon;

separator Stmt "";

NoInit.         Item ::= Ident;

Init.           Item ::= Ident "=" Expr;

separator nonempty Item ",";

SAssign.        Stmt ::= Expr "=" Expr  Semicolon;

SAssignOp.      Stmt ::= Expr AssignOp Expr  Semicolon;

SPostInc.       Stmt ::= Expr "++" Semicolon;

SPostDec.       Stmt ::= Expr "--" Semicolon;

SReturn.        Stmt ::= "return" Expr Semicolon;

SReturnV.       Stmt ::= "return" Semicolon;

-- The following two rules are responsible for the only shift/reduce conflict,
-- tested in conflict001 testcase.
SIf.            Stmt ::= "if" "(" Expr ")" Stmt;

SIfElse.        Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;

SWhile.         Stmt ::= "while" "(" Expr ")" Stmt;

SForeach.       Stmt ::= "for" "(" TypeBasic Ident ":" Expr ")" Stmt;

SExpr.          Stmt ::= Expr Semicolon;

-- EXPRESSIONS --
-----------------

EVar.       Expr7 ::= Ident;

ELitInt.    Expr7 ::= Integer;

ELitTrue.   Expr7 ::= "true";

ELitFalse.  Expr7 ::= "false";

EString.    Expr7 ::= String;

-- EXTENSIONS/
EThis.      Expr7 ::= "self";

ENull.      Expr7 ::= "null";

ENullT.     Expr7 ::= "(" TypeComposed ")null";

ELitChar.   Expr7 ::= Char;

EArray.     Expr6 ::= Expr6 "[" Expr "]";

EField.     Expr6 ::= Expr6 "." Ident;

EMethod.    Expr6 ::= Expr6 "." Ident "(" [Expr] ")";

ENewObject. Expr5 ::= "new" TypeComposed;

ENewArray.  Expr5 ::= "new" TypeBasic "[" Expr "]";
-- /EXTENSIONS

EApp.       Expr5 ::= Ident "(" [Expr] ")";

-- Original grammary says that `Expr5 ::= "-" Expr6`, this rule prohibits many not-so-useful
-- expressions like `- -1`. Being a total fan of weird stuff, I have changed that.
ENeg.       Expr5 ::= "-" Expr5;

-- See comment on previous rule.
ENot.       Expr5 ::= "!" Expr5;

EMul.       Expr4 ::= Expr4 MulOp Expr5;

EAdd.       Expr3 ::= Expr3 AddOp Expr4;

ERel.       Expr2 ::= Expr2 RelOp Expr3;

EAnd.       Expr1 ::= Expr1 "&&" Expr2;

EOr.        Expr ::= Expr "||" Expr1;

coercions Expr 7;

separator Expr ",";

-- OPERATORS --
---------------

APlus.      AssignOp ::= "+=";

AMinus.     AssignOp ::= "-=";

ATimes.     AssignOp ::= "*=";

ADiv.       AssignOp ::= "/=";

AMod.       AssignOp ::= "%=";

Plus.       AddOp ::= "+";

Minus.      AddOp ::= "-";

Times.      MulOp ::= "*";

Div.        MulOp ::= "/";

Mod.        MulOp ::= "%";

LTH.        RelOp ::= "<";

LEQ.        RelOp ::= "<=";

GTH.        RelOp ::= ">";

GEQ.        RelOp ::= ">=";

EQU.        RelOp ::= "==";

NEQ.        RelOp ::= "!=";

-- TOKENS --
------------

position token Semicolon ';';

position token LeftBrace '{';

position token RightBrace '}';

-- COMMENTS --
--------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

