-- Jvmm : BNF syntax specification --
-------------------------------------

-- There are 2 shift/reduce conflicts
-- SIf. | SIfElse. -- tested in examples_good/conflict001.jv
-- SAssignArr. | EAccessArr. -- tested in examples_good/conflict002.jv
-- Labels prefixed with "P" are prunned during translation

-- programs --
--------------

entrypoints PProg;

PProg.      PProg ::= [PDefFunc];

separator nonempty PDefFunc "";

-- declarations/definitions --
------------------------------

PDefFunc.   PDefFunc ::= Type Ident "(" [Arg] ")" PFunExcepts PBlock;

PExcepts.   PFunExcepts ::= "throws" [Type];

separator nonempty Type ",";

PNoExcept.  PFunExcepts ::= ;

internal    SDefFunc. Stmt ::= Type Ident "(" [Arg] ")" "throws" [Type] Stmt;

Arg.        Arg ::= Type Ident;

separator Arg ",";

PSDeclVar.  Stmt ::= Type [PItem] ";";

PNoInit.    PItem ::= Ident;

PInit.      PItem ::= Ident "=" Expr;

separator nonempty PItem ",";

internal    SDeclVar. Stmt ::= Type Ident ";";

internal    SDefVar. Stmt ::= Type Ident "=" Expr ";";

-- statements --
----------------

PBlock.     PBlock ::= "{" [Stmt] "}";

internal    SBlock. Stmt ::= "{" [Stmt] "}";

internal    Global. Stmt ::= "{" [Stmt] "}";

separator Stmt "";

SEmpty.     Stmt ::= ";";

PSBlock.    Stmt ::= PBlock;

SAssign.    Stmt ::= Ident "=" Expr  ";";

SAssignOp.  Stmt ::= Ident OpAssign Expr  ";";

SAssignArr. Stmt ::= Ident "[" Expr "]" "=" Expr  ";";

SPostInc.   Stmt ::= Ident "++" ";";

SPostDec.   Stmt ::= Ident "--" ";";

SReturn.    Stmt ::= "return" Expr ";";

SReturnV.   Stmt ::= "return" ";";

SIf.        Stmt ::= "if" "(" Expr ")" Stmt;

SIfElse.    Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;

SWhile.     Stmt ::= "while" "(" Expr ")" Stmt;

SForeach.   Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt;

SExpr.      Stmt ::= Expr ";";

SThrow.     Stmt ::= "throw" Expr ";";

STryCatch.  Stmt ::= "try" Stmt "catch" "(" Type Ident ")" Stmt;

-- types --
-----------

TArray.     Type1 ::= Type "[]";

TInt.       Type ::= "int";

TString.    Type ::= "String";

TChar.      Type ::= "char";

TBool.      Type ::= "boolean";

TVoid.      Type ::= "void";

TUser.      Type ::= Ident;

internal    TFunc. Type ::= Type [Type];

coercions Type 1;

separator Type ",";

-- expressions --
-----------------

EVar.       Expr8 ::= Ident;

ELitInt.    Expr8 ::= Integer;

ELitTrue.   Expr8 ::= "true";

ELitFalse.  Expr8 ::= "false";

ELitString. Expr8 ::= String;

ELitChar.   Expr8 ::= Char;

ENull.      Expr8 ::= "null";

EAccessArr. Expr7 ::= Expr8 "[" Expr "]";

EAccessFn.  Expr7 ::= Expr8 "." Ident "(" [Expr] ")";

EAccessVar. Expr7 ::= Expr8 "." Ident;

EApp.       Expr7 ::= Ident "(" [Expr] ")";

ENewArr.    Expr6 ::= "new" Type "[" Expr "]";

ENeg.       Expr5 ::= "-" Expr6;

ENot.       Expr5 ::= "!" Expr6;

EMul.       Expr4 ::= Expr4 OpMul Expr5 ;

EAdd.       Expr3 ::= Expr3 OpAdd Expr4 ;

ERel.       Expr2 ::= Expr2 OpRel Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;

coercions Expr 8;

separator Expr ",";

-- operators --
---------------

APlus.      OpAssign ::= "+=";

AMinus.     OpAssign ::= "-=";

ATimes.     OpAssign ::= "*=";

ADiv.       OpAssign ::= "/=";

AMod.       OpAssign ::= "%=";

Plus.       OpAdd ::= "+";

Minus.      OpAdd ::= "-";

Times.      OpMul ::= "*";

Div.        OpMul ::= "/";

Mod.        OpMul ::= "%";

LTH.        OpRel ::= "<";

LEQ.        OpRel ::= "<=";

GTH.        OpRel ::= ">";

GEQ.        OpRel ::= ">=";

EQU.        OpRel ::= "==";

NEQ.        OpRel ::= "!=";

-- tokens --
------------

-- comments --
--------------

comment  "//";

comment  "/*" "*/";

