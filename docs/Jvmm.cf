-- JVMM : BNF syntax specification --
-------------------------------------

entrypoints Program;

-- DECLARATION --
-----------------
DVariable.    Declaration ::= Type Ident;

-- PROGRAM --
--------------
Program.      Program ::= [Definition];
separator nonempty Definition "";

DFunction.    Definition ::= Function;
DClass.       Definition ::= Class;

-- FUNCTION --
--------------
Function.     Function ::= Type Ident "(" [Argument] ")" Exceptions "{" [Stmt] "}";
separator Argument ",";

NoExceptions. Exceptions ::= ;
Exceptions.   Exceptions ::= "throws" [Type];
separator nonempty Type ",";

Argument.     Argument ::= Type Ident;

-- CLASS --
-----------
Class.        Class ::= "class" Ident Extends "{" [Member] "}";
terminator nonempty Member "";

Field.      Member ::= Declaration ";";
Method.     Member ::= Function;

SuperClass.   Extends ::= "extends" Type;
SuperObject.  Extends ::= ;

-- TYPES --
-----------

TVoid.      Type ::= "void";
TInt.       Type ::= "int";
TChar.      Type ::= "char";
TBool.      Type ::= "boolean";

TString.    Type ::= "String"; -- for compatibility with Java
TString.    Type ::= "string";
TObject.    Type ::= "Object";
TUser.      Type ::= Ident;

TArray.     Type ::= Type "[]";


-- TODO --

-- STATEMENTS --
----------------
SBlock.         Stmt ::= "{" [Stmt] "}";
separator Stmt "";

SAssignOp.      Stmt ::= Ident OpAssign Expr  ";";
SAssignOpArr.   Stmt ::= Ident "[" Expr "]" OpAssign Expr  ";";
SAssignOpFld.   Stmt ::= Ident "." Ident OpAssign Expr  ";";
SAssignOpThis.  Stmt ::= "this" "." Ident OpAssign Expr  ";";

SPostInc.       Stmt ::= Ident "++" ";";
SPostDec.       Stmt ::= Ident "--" ";";

SEmpty.         Stmt ::= ";";

SAssign.        Stmt ::= Ident "=" Expr  ";";
SAssignArr.     Stmt ::= Ident "[" Expr "]" "=" Expr  ";";
SAssignFld.     Stmt ::= Ident "." Ident "=" Expr  ";";
SAssignThis.    Stmt ::= "this" "." Ident "=" Expr  ";";

SReturn.        Stmt ::= "return" Expr ";";
SReturnV.       Stmt ::= "return" ";";

-- The following two rules are responsible for the only shift/reduce conflict,
-- tested in examples_good/conflict001.jv.
SIf.            Stmt ::= "if" "(" Expr ")" Stmt;
SIfElse.        Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;

SWhile.         Stmt ::= "while" "(" Expr ")" Stmt;
SForeach.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt;

SExpr.          Stmt ::= Expr ";";

SThrow.         Stmt ::= "throw" Expr ";";
STryCatch.      Stmt ::= "try" Stmt "catch" "(" Type Ident ")" Stmt;

SDeclVar.       Stmt ::= Type [Item] ";";
separator nonempty Item ",";

NoInit.         Item ::= Ident;
Init.           Item ::= Ident "=" Expr;

-- expressions --
-----------------

EAccessArr. Expr7 ::= Expr7 "[" Expr "]";
EAccessFn.  Expr7 ::= Expr7 "." Ident "(" [Expr] ")";
EAccessVar. Expr7 ::= Expr7 "." Ident;

EVar.       Expr6 ::= Ident;
ELitInt.    Expr6 ::= Integer;
ELitString. Expr6 ::= String;
ELitChar.   Expr6 ::= Char;

EThis.      Expr6 ::= "this";
ELitTrue.   Expr6 ::= "true";
ELitFalse.  Expr6 ::= "false";
ENull.      Expr6 ::= "null";
ENullT.     Expr6 ::= "(" Type ")null";

EAccessArrI.  Expr5 ::= Ident "[" Expr "]";
EAccessFnI.   Expr5 ::= Ident "." Ident "(" [Expr] ")";
EAccessVarI.  Expr5 ::= Ident "." Ident;

EApp.       Expr5 ::= Ident "(" [Expr] ")";

ENewObj.    Expr5 ::= "new" Type;
ENewArr.    Expr5 ::= "new" Type "[" Expr "]";

ENeg.       Expr5 ::= "-" Expr5;
ENot.       Expr5 ::= "!" Expr5;

EMul.       Expr4 ::= Expr4 OpBin4 Expr5;

EAdd.       Expr3 ::= Expr3 OpBin3 Expr4;

ERel.       Expr2 ::= Expr2 OpBin2 Expr3;

EAnd.       Expr1 ::= Expr1 OpBin1 Expr2;

EOr.        Expr ::= Expr OpBin Expr1;

coercions Expr 9;

separator Expr ",";

-- operators --
---------------

ATimes.     OpAssign ::= "*=";
ADiv.       OpAssign ::= "/=";
AMod.       OpAssign ::= "%=";

APlus.      OpAssign ::= "+=";
AMinus.     OpAssign ::= "-=";

Times.      OpBin4 ::= "*";
Div.        OpBin4 ::= "/";
Mod.        OpBin4 ::= "%";

Plus.       OpBin3 ::= "+";
Minus.      OpBin3 ::= "-";

LTH.        OpBin2 ::= "<";
LEQ.        OpBin2 ::= "<=";
GTH.        OpBin2 ::= ">";
GEQ.        OpBin2 ::= ">=";
EQU.        OpBin2 ::= "==";
NEQ.        OpBin2 ::= "!=";

And.        OpBin1 ::= "&&";

Or.         OpBin ::= "||";

-- tokens --
------------

-- comments --
--------------

comment  "//";
comment  "/*" "*/";

