-- Jvmm : BNF syntax specification --
-------------------------------------

-- Note the ugly trick with coercion 0 for OpBin, this makes 2 (+) 3 * 4 a
-- parse error. Without this trick one can promote binary operator 2 (+) 3 * 4 =
-- (2 + 3) * 4, we don't really like that.

-- programs --
--------------

entrypoints Prog;

Prog.       Prog ::= [DefGlobal];
separator nonempty DefGlobal "";

GlobFunc.   DefGlobal ::= DefFunc;
GlobClass.  DefGlobal ::= DefClass;

-- blocks --
------------

Block.      Block ::= "{" [Stmt] "}";
separator Stmt "";

-- declarations/definitions --
------------------------------

Arg.        Arg ::= Type Ident;
separator Arg ",";

DefFunc.    DefFunc ::= Type Ident "(" [Arg] ")" FunExcepts Block;

Excepts.    FunExcepts ::= "throws" [Type];
separator nonempty Type ",";

NoExcept.   FunExcepts ::= ;

SDeclVar.   Stmt ::= Type [Item] ";";
separator nonempty Item ",";

NoInit.     Item ::= Ident;
Init.       Item ::= Ident "=" Expr;

DefClass.   DefClass ::= "class" Ident "{" [Member] "}";
separator nonempty Member ";";
terminator Member ";";

Field.      Member ::= Type Ident;

-- statements --
----------------

SBlock.     Stmt ::= Block;

SAssignOp.    Stmt ::= Ident OpAssign Expr  ";";
SAssignOpArr. Stmt ::= Ident "[" Expr "]" OpAssign Expr  ";";
SAssignOpFld. Stmt ::= Ident "." Ident OpAssign Expr  ";";

SPostInc.   Stmt ::= Ident "++" ";";
SPostDec.   Stmt ::= Ident "--" ";";

SEmpty.     Stmt ::= ";";

SAssign.    Stmt ::= Ident "=" Expr  ";";
SAssignArr. Stmt ::= Ident "[" Expr "]" "=" Expr  ";";
SAssignFld. Stmt ::= Ident "." Ident "=" Expr  ";";

SReturn.    Stmt ::= "return" Expr ";";
SReturnV.   Stmt ::= "return" ";";

-- The following two rules together create one additional shift/reduce
-- conflict, tested in examples_good/conflict001.jv
SIf.        Stmt ::= "if" "(" Expr ")" Stmt;
SIfElse.    Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;

SWhile.     Stmt ::= "while" "(" Expr ")" Stmt;

SForeach. Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt;

-- The following rule alone creates two additional shift/reduce and one
-- reduce/reduce conflict.
SExpr.      Stmt ::= Expr ";";

SThrow.     Stmt ::= "throw" Expr ";";

STryCatch.  Stmt ::= "try" Stmt "catch" "(" Type Ident ")" Stmt;

-- types --
-----------

TVoid.      Type ::= "void";
TInt.       Type ::= "int";
TChar.      Type ::= "char";
TBool.      Type ::= "boolean";

TString.    Type ::= "String"; -- for compatibility with Java
TString.    Type ::= "string";

-- This rule creates one additional reduce/reduce conflict, one possible
-- solution is to resolve any non-primitive in type checker.
TUser.      Type ::= Ident;

TObject.    Type ::= "Object";

TArray.     Type1 ::= Type "[]";

coercions Type 1;

-- expressions --
-----------------

EVar.       Expr8 ::= Ident;

ELitInt.    Expr8 ::= Integer;

ELitTrue.   Expr8 ::= "true";
ELitFalse.  Expr8 ::= "false";

ELitString. Expr8 ::= String;

ELitChar.   Expr8 ::= Char;

ENull.      Expr8 ::= "null";

EAccessArr. Expr7 ::= Expr8 "[" Expr "]";

EAccessFn.  Expr7 ::= Expr8 "." Ident "(" [Expr] ")";
EAccessVar. Expr7 ::= Expr8 "." Ident;
EApp.       Expr7 ::= Ident "(" [Expr] ")";

ENewObj.    Expr6 ::= "new" Type;
ENewArr.    Expr6 ::= "new" Type "[" Expr "]";

ENeg.       Expr5 ::= "-" Expr5;
ENot.       Expr5 ::= "!" Expr5;

EMul.       Expr4 ::= Expr4 OpBin4 Expr5 ;

EAdd.       Expr3 ::= Expr3 OpBin3 Expr4 ;

ERel.       Expr2 ::= Expr2 OpBin2 Expr3 ;

EAnd.       Expr1 ::= Expr2 OpBin1 Expr1 ;

EOr.        Expr ::= Expr1 OpBin Expr ;

coercions Expr 8;

separator Expr ",";

-- operators --
---------------

ATimes.     OpAssign ::= "*=";
ADiv.       OpAssign ::= "/=";
AMod.       OpAssign ::= "%=";

APlus.      OpAssign ::= "+=";
AMinus.     OpAssign ::= "-=";

Times.      OpBin4 ::= "*";
Div.        OpBin4 ::= "/";
Mod.        OpBin4 ::= "%";

Plus.       OpBin3 ::= "+";
Minus.      OpBin3 ::= "-";

LTH.        OpBin2 ::= "<";
LEQ.        OpBin2 ::= "<=";
GTH.        OpBin2 ::= ">";
GEQ.        OpBin2 ::= ">=";
EQU.        OpBin2 ::= "==";
NEQ.        OpBin2 ::= "!=";

And.        OpBin1 ::= "&&";

Or.         OpBin ::= "||";

-- disable parentheses promotion
coercions OpBin 0;

-- tokens --
------------

-- comments --
--------------

comment  "//";
comment  "/*" "*/";

