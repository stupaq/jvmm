-- Jvmm : BNF syntax specification --
-------------------------------------

-- There are 2 shift/reduce conflicts
-- SIf. | SIfElse. -- tested in examples_good/conflict001.jv
-- SAssignArr. | EAccessArr. -- tested in examples_good/conflict002.jv

-- programs --
--------------

entrypoints Prog;

Prog.       Prog ::= [DefFunc];

separator nonempty DefFunc "";

-- declarations/definitions --
------------------------------

SDefFunc.   DefFunc ::= Type Ident "(" [Arg] ")" Block;

Arg.        Arg ::= Type Ident;

separator Arg ",";

SDeclVar.   Stmt ::= Type [Item] ";";

NoInit.     Item ::= Ident;

Init.       Item ::= Ident "=" Expr;

separator nonempty Item ",";


-- statements --
----------------

Block.      Block ::= "{" [Stmt] "}";

separator Stmt "";

SEmpty.     Stmt ::= ";";

SBlock.     Stmt ::= Block;

SAssign.    Stmt ::= Ident "=" Expr  ";";

SAssignAdd. Stmt ::= Ident "+=" Expr  ";";

SAssignSub. Stmt ::= Ident "-=" Expr  ";";

SAssignMul. Stmt ::= Ident "*=" Expr  ";";

SAssignDiv. Stmt ::= Ident "/=" Expr  ";";

SAssignMod. Stmt ::= Ident "%=" Expr  ";";

SAssignArr. Stmt ::= Ident "[" Expr "]" "=" Expr  ";";

SPostInc.   Stmt ::= Ident "++" ";";

SPostDec.   Stmt ::= Ident "--" ";";

SReturn.    Stmt ::= "return" Expr ";";

SReturnV.   Stmt ::= "return" ";";

SIf.        Stmt ::= "if" "(" Expr ")" Stmt;

SIfElse.    Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;

SWhile.     Stmt ::= "while" "(" Expr ")" Stmt;

SForeach.   Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt;

SExpr.      Stmt ::= Expr ";";

-- SThrow.     Stmt ::= "throw" Expr ";";

-- SCatch.     Stmt ::= "try" Stmt "catch" "(" Type Ident ")" Stmt;

-- types --
-----------

TArray.     Type1 ::= Type "[]";

TInt.       Type ::= "int";

TString.    Type ::= "String";

TString.    Type ::= "string";

TChar.      Type ::= "char";

TBool.      Type ::= "boolean";

TVoid.      Type ::= "void";

coercions Type 1;

separator Type ",";

-- expressions --
-----------------

EVar.       Expr8 ::= Ident;

ELitInt.    Expr8 ::= Integer;

ELitTrue.   Expr8 ::= "true";

ELitFalse.  Expr8 ::= "false";

ELitString. Expr8 ::= String;

ELitChar.   Expr8 ::= Char;

ENull.      Expr8 ::= "null";

EAccessArr. Expr7 ::= Expr8 "[" Expr "]";

EAccessFn.  Expr7 ::= Expr8 "." Ident "(" [Expr] ")";

EAccessVar. Expr7 ::= Expr8 "." Ident;

EApp.       Expr7 ::= Ident "(" [Expr] ")";

ENewArr.    Expr6 ::= "new" Type "[" Expr "]";

ENeg.       Expr5 ::= "-" Expr6;

ENot.       Expr5 ::= "!" Expr6;

EMul.       Expr4 ::= Expr4 "*" Expr5;

EDiv.       Expr4 ::= Expr4 "/" Expr5;

EMod.       Expr4 ::= Expr4 "%" Expr5;

EAdd.       Expr3 ::= Expr3 "+" Expr4;

ESub.       Expr3 ::= Expr3 "-" Expr4;

ERel.       Expr2 ::= Expr2 OpRel Expr3;

EAnd.       Expr1 ::= Expr2 "&&" Expr1;

EOr.        Expr ::= Expr1 "||" Expr;

coercions Expr 8;

separator Expr ",";

-- operators --
---------------

LTH.        OpRel ::= "<";

LEQ.        OpRel ::= "<=";

GTH.        OpRel ::= ">";

GEQ.        OpRel ::= ">=";

EQU.        OpRel ::= "==";

NEQ.        OpRel ::= "!=";

-- tokens --
------------

-- comments --
--------------

comment  "//";

comment  "/*" "*/";

